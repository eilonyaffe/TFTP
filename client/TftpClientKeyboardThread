package bgu.spl.net.impl.tftp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;

public class TftpClientKeyboardThread extends Thread {
    BufferedReader keyboardin = new BufferedReader(new InputStreamReader(System.in));
    ConnectionHandler bch = new BlockingConnectionHandler<byte[]>(null, null, null); //eilon- change after


    @Override
    public void run() {
        try {
            String userInput;
            while ((userInput = keyboardin.readLine()) != null) {
                String[] words = userInput.split("\\s+");
                String command = words[0];
                //keyboard thread commands
                byte[] suitedPacket;

                if(command=="LOGRQ"){
                   suitedPacket = this.logrqPacketCreator(words[1]);
                }
                else if(command=="DELRQ"){
                    suitedPacket = this.deleqPacketCreator(words[1]);

                }
                else if(command=="RRQ"){
                    suitedPacket = this.rrqPacketCreator(words[1]);

                }
                else if(command=="WRQ"){
                    suitedPacket = this.wrqPacketCreator(words[1]);

                }
                else if(command=="DIRQ"){
                    suitedPacket = this.dirqPacketCreator();

                }
                else if(command=="DISC"){
                    suitedPacket = this.discPacketCreator();
                }
                // bch.send(suitedPacket); //something like this
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    protected byte[] logrqPacketCreator(String username){
        short a = 7;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        byte[] usernameInBytes = stringToBytes(username);
        int packetSize = usernameInBytes.length+3;
        byte[] ans = new byte[packetSize];
        ans[0] = a_bytes[0];
        ans[1] = a_bytes[1];
        for(int i=2;i<ans.length;i++){
            ans[i] = usernameInBytes[i-2];
        }
        ans[ans.length-1] = 0;
        return ans;
    }

    protected byte[] deleqPacketCreator(String filename){
        short a = 8;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        byte[] filenameInBytes = stringToBytes(filename);
        int packetSize = filenameInBytes.length+3;
        byte[] ans = new byte[packetSize];
        ans[0] = a_bytes[0];
        ans[1] = a_bytes[1];
        for(int i=2;i<ans.length;i++){
            ans[i] = filenameInBytes[i-2];
        }
        ans[ans.length-1] = 0;
        return ans;
    }

    protected byte[] rrqPacketCreator(String filename){
        short a = 1;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        byte[] filenameInBytes = stringToBytes(filename);
        int packetSize = filenameInBytes.length+3;
        byte[] ans = new byte[packetSize];
        ans[0] = a_bytes[0];
        ans[1] = a_bytes[1];
        for(int i=2;i<ans.length;i++){
            ans[i] = filenameInBytes[i-2];
        }
        ans[ans.length-1] = 0;
        return ans;
    }

    protected byte[] wrqPacketCreator(String filename){
        short a = 2;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        byte[] filenameInBytes = stringToBytes(filename);
        int packetSize = filenameInBytes.length+3;
        byte[] ans = new byte[packetSize];
        ans[0] = a_bytes[0];
        ans[1] = a_bytes[1];
        for(int i=2;i<ans.length;i++){
            ans[i] = filenameInBytes[i-2];
        }
        ans[ans.length-1] = 0;
        return ans;
    }

    protected byte[] dirqPacketCreator(){
        short a = 6;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        return a_bytes;
    }

    protected byte[] discPacketCreator(){
        short a = 10;
        byte[] a_bytes = new byte []{( byte ) ( a >> 8) , ( byte ) ( a & 0xff ) };
        return a_bytes;
    }

    public static byte[] shortToBytes(short shrt){
        byte [] a_bytes = new byte []{( byte ) ( shrt >> 8) , ( byte ) ( shrt & 0xff ) };
        return a_bytes;
    }

    public static byte[] stringToBytes(String str){
        try{
            return str.getBytes("UTF-8");
        }catch(UnsupportedEncodingException e){
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) throws IOException {
        TftpClientKeyboardThread kbthread = new TftpClientKeyboardThread();
        kbthread.start();

    }

}
